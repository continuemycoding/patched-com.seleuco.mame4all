// DexPatcher Patched Application plugin:

apply plugin: 'com.github.lanchon.dexpatcher.patched-application'

// The DexPatcher Patched Application plugin produces a modified Android application
// by applying changes and additions to code and resources of a source application
// imported as a DexPatcher APK library.

// General Plugin Configuration
dexpatcherConfig {
    // This should point to a local clone of the DexPatcher Gradle plugin support tool
    // repo that is available here: https://github.com/Lanchon/DexPatcher-gradle-tools
    // But instead of defining the directory here, add a 'dexpatcher.dir' entry to the
    // 'local.properties' of the root project. That way it becomes available to all
    // subprojects and the local configuration is not posted to the VCS.
    //dir = '~/android/dexpatcher/dexpatcher-gradle-tools'

    // Specific Plugin Configuration
    patchedApplication {
        // Speed up debug builds by enabling multi-threaded multi-dex processing for them,
        // but only if multi-dex mode is already enabled for them. Defaults to true.
        //multiDexThreadedForMultiDexDebugBuilds = true

        // Speed up debug builds by enabling multi-threaded multi-dex processing for them,
        // even if multi-dex mode is not already enabled for them. Note that apps patched
        // in multi-dex mode are only compatible with devices running Android 5.0 (API 21)
        // and later. Defaults to false.
        //multiDexThreadedForAllDebugBuilds = true
    }

    // Per-Tool Defaults
    dexpatcher {
        // The Android api level of dex files. The api level is auto-detected by DexPatcher
        // v1.2.0 and later, so this setting is no longer needed for normal operation.
        //apiLevel = 14

        // Enable multi-dex support. Note that DexPatcher only supports native multi-dex as
        // implemented in ART and does not support legacy multi-dex for Dalvik VM. Patched
        // multi-dex apps are only compatible with Android 5.0 (API 21) and later devices.
        //multiDex = true

        // Enable multi-threaded multi-dex processing, if multi-dex mode is already enabled.
        // Multi-threaded processing is faster but produces more dex files than the bare
        // minimum required by the contents of the patched app. This is recommended for
        // debug builds but not for releases.
        //multiDexThreaded = true

        // Set the number of multi-dex processing threads, if multi-threaded multi-dex mode
        // is already enabled. Defaults to the number of available processors up to 4.
        //multiDexJobs = 8

        // The maximum number of items in the pools of the output dex files. This limits,
        // for example, the number of method references in each dex file. Defaults to 65536.
        //maxDexPoolSize = 65536

        // The package name of the used DexPatcher annotations. Useful to handle rogue apps
        // that want to disallow patching by intentionally clashing with standard DexPatcher
        // annotation names. Defaults to 'lanchon.dexpatcher.annotation'.
        //annotationPackage = 'lanchon.dexpatcher.annotation'

        // Enable compatibility with the deprecated DexTag.
        //compatDexTag = true

        // The verbosity of the DexPatcher tool. One of QUIET, NORMAL, VERBOSE or DEBUG.
        // Defaults to NORMAL, but VERBOSE is recommended.
        verbosity = VERBOSE

        // Enable logging of relative paths of source files instead of just their filename.
        //logSourcePath = true

        // Enable logging of paths of source files prepending the specified root.
        //logSourcePathRoot = file('src/main/java')

        // Enable logging of timing statistics.
        //logStats = true
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        // The 'package' attribute in the patched app manifest must be different from the
        // source app ID to support class generation (R and BuildConfig), but here you can
        // override the exported patched app ID to match the source.
        applicationId 'com.qiang.mame4all'

        // You must set these fields to match or be compatible with the corresponding data
        // of the source app. (Data is displayed when the source apk library is built.)
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 150
        versionName "1.50"

        resValue "string", "button_a", "按钮A"
        resValue "string", "button_b", "按钮B"
        resValue "string", "button_x", "按钮X"
        resValue "string", "button_y", "按钮Y"

        resValue "string", "button_a_visible", "false"
        resValue "string", "button_b_visible", "false"
        resValue "string", "button_x_visible", "false"
        resValue "string", "button_y_visible", "false"

        resValue "bool", "multiplayer", "false"

        resValue "string", "DANGBEIAD_APPID", "dv2IHuXtV0xzxVEYFZ51sG/SM7zCN2sFKdqnbP3cQLc="
        resValue "string", "DANGBEIAD_APPKEY", "E9851F713A692EA5"
    }

    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            addManifestPlaceholders([UMENG_CHANNEL: name])
        }

//        qihoo {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
//
//            addManifestPlaceholders([UMENG_CHANNEL: name])
//        }
//
//        yingyongbao {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
//
//            addManifestPlaceholders([UMENG_CHANNEL: name])
//        }
//
        xiaomi {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            addManifestPlaceholders([UMENG_CHANNEL: name])
        }
//
//        tvleshi {//乐视TV
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
//
//            addManifestPlaceholders([UMENG_CHANNEL: name])
//        }
//
//        tvhuan {//欢视网
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
//
//            addManifestPlaceholders([UMENG_CHANNEL: name])
//        }

        dangbei {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            addManifestPlaceholders([UMENG_CHANNEL: name])
        }

//        qipo {
//            minifyEnabled false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
//
//            addManifestPlaceholders([UMENG_CHANNEL: name])
//        }

        weijing {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            addManifestPlaceholders([UMENG_CHANNEL: name])
        }
    }

//    buildTypes.each{buildType->
//        buildType.debuggable true
//    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            String outputFileName = variant.applicationId + "-" + variant.versionName + "@" + variant.versionCode + "-" + (variant.buildType.name) + ".apk"
            output.outputFile = new File(output.outputFile.parentFile, outputFileName);
        }

        variant.assemble.doLast {
            variant.outputs.each { output ->
                File unaligned = output.packageApplication.outputFile;
                File aligned = output.outputFile
                if (!unaligned.getName().equalsIgnoreCase(aligned.getName())) {
                    unaligned.delete()
                }
            }
        }
    }

    productFlavors {

        dino {
            resValue "string", "app_name", "恐龙快打"

            addManifestPlaceholders([UMENG_APPKEY: "58d424e545297d4a0a0013e7"])
        }

        captcomm{
            resValue "string", "app_name", "名将"

            addManifestPlaceholders([UMENG_APPKEY: "58d424f9a40fa3618a0006c6"])
        }

        knights{
            resValue "string", "app_name", "圆桌骑士"

            addManifestPlaceholders([UMENG_APPKEY: "58d425294544cb138b001c6d"])
        }

        punisher{
            resValue "string", "app_name", "惩罚者"

            addManifestPlaceholders([UMENG_APPKEY: "58d425294544cb138b001c6d"])
        }

        orlegend{
            resValue "string", "app_name", "西游释厄传"

            addManifestPlaceholders([UMENG_APPKEY: "58d42515677baa3b35001ce9"])
        }

        kod{
            resValue "string", "app_name", "三国志"

            addManifestPlaceholders([UMENG_APPKEY: "58d425294544cb138b001c6d"])
        }
    }

    productFlavors.all { productFlavor ->
        productFlavor.applicationIdSuffix "." + name
    }

    sourceSets.all { sourceSet ->
        sourceSet.res.srcDirs = ['src/main/res', 'src/main/games/' + name]
    }
}

//tasks.withType(com.android.build.gradle.tasks.Lint) {
//    enabled = false
//}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile project(':source')
    compile project(':modules:framework')
    debugCompile project(':modules:DangBeiAd')
    dangbeiCompile project(':modules:DangBeiAd')
    compile project(':modules:YouMiAd')
    compile project(path: ':modules:DangBeiUpdate')
}
